// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/update-a-database

package notion

import (
	"context"
	"fmt"
	uuid "github.com/google/uuid"
	"net/http"
)

/*
Updates the database object â€” the title, description, or properties â€” of a specified database.

Returns the updated [database object](https://developers.notion.com/reference/database).

Database properties represent the columns (or schema) of a database. To update the properties of a database, use theÂ `properties`Â [body param](https://developers.notion.com/reference/update-property-schema-object) with this endpoint. Learn more about database properties in the [database properties](https://developers.notion.com/reference/property-object) and [Update database properties](https://developers.notion.com/reference/update-property-schema-object) docs.

To update aÂ `relation`Â database property, share the related database with the integration. Learn more about relations in the [database properties](https://developers.notion.com/reference/property-object#relation) page.

For an overview of how to use the REST API with databases, refer to the [Working with databases](https://developers.notion.com/docs/working-with-databases) guide.

### How database property type changes work

All properties in pages are stored as rich text. Notion will convert that rich text based on the types defined in a database's schema. When a type is changed using the API, the data will continue to be available, it is just presented differently.

For example, a multi select property value is represented as a comma-separated list of strings (eg. "1, 2, 3") and a people property value is represented as a comma-separated list of IDs. These are compatible and the type can be converted.

Note: Not all type changes work. In some cases data will no longer be returned, such as people type â†’ file type.

### Interacting with database rows

This endpoint cannot be used to update database rows.

To update the properties of a database row â€” rather than a column â€” use theÂ [Update page properties](https://developers.notion.com/reference/patch-page)Â endpoint. To add a new row to a database, use theÂ [Create a page](https://developers.notion.com/reference/post-page) endpoint.

### Recommended database schema size limit

Developers are encouraged to keep their database schema size to a maximum of **50KB**. To stay within this schema size limit, the number of properties (or columns) added to a database should be managed.

Database schema updates that are too large will be blocked by the REST API to help developers keep their database queries performant.

### Errors

Each Public API endpoint can return several possible error codes. See the [Error codes section](https://developers.notion.com/reference/status-codes#error-codes) of the Status codes documentation for more information.

> ðŸš§ The following database properties cannot be updated via the API:
>
> - `formula`
> - `select`
> - `status`
> - [Synced content](https://www.notion.so/help/guides/synced-databases-bridge-different-tools)
> - A `multi_select` database propertyâ€™s options values. An option can be removed, but not updated.

> ðŸ“˜ Database relations must be shared with your integration
>
> To update a database [relation](https://www.notion.so/help/relations-and-rollups#what-is-a-database-relation) property, the related database must also be shared with your integration.
*/
func (c *Client) UpdateDatabase(ctx context.Context, database_id uuid.UUID, params UpdateDatabaseParams, options ...callOption) (*Database, error) {
	return call(
		ctx,
		c.accessToken,
		http.MethodPatch,
		fmt.Sprintf("/v1/databases/%v", database_id),
		params,
		accessValue[*Database],
		options...,
	)
}

type UpdateDatabaseParams map[string]any

// An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the title of the database that is displayed in the Notion UI. If omitted, then the database title remains unchanged.
func (p UpdateDatabaseParams) Title(title []RichText) UpdateDatabaseParams {
	p["title"] = title
	return p
}

// An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the description of the database that is displayed in the Notion UI. If omitted, then the database description remains unchanged.
func (p UpdateDatabaseParams) Description(description []RichText) UpdateDatabaseParams {
	p["description"] = description
	return p
}

// The properties of a database to be changed in the request, in the form of a JSON object. If updating an existing property, then the keys are the names or IDs of the properties as they appear in Notion, and the values are [property schema objects](ref:property-schema-object). If adding a new property, then the key is the name of the new database property and the value is a [property schema object](ref:property-schema-object).
func (p UpdateDatabaseParams) Properties(properties map[string]PropertySchema) UpdateDatabaseParams {
	p["properties"] = properties
	return p
}
