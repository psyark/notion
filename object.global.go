package notion

import (
	"encoding/json"
	"fmt"
)

// Code generated by notion.doc2api; DO NOT EDIT.

type FileOrEmoji interface {
	isFileOrEmoji()
}

type fileOrEmojiUnmarshaler struct {
	value FileOrEmoji
}

/*
UnmarshalJSON unmarshals a JSON message and sets the value field to the appropriate instance
according to the "type" field of the message.
*/
func (u *fileOrEmojiUnmarshaler) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.value = nil
		return nil
	}
	switch getType(data) {
	case "emoji":
		u.value = &Emoji{}
	case "external":
		u.value = &ExternalFile{}
	case "file":
		u.value = &NotionHostedFile{}
	default:
		return fmt.Errorf("unmarshaling FileOrEmoji: data has unknown type field: %s", string(data))
	}
	return json.Unmarshal(data, u.value)
}

func (u *fileOrEmojiUnmarshaler) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.value)
}

type PropertyItemOrPropertyItemPagination interface {
	isPropertyItemOrPropertyItemPagination()
}

type propertyItemOrPropertyItemPaginationUnmarshaler struct {
	value PropertyItemOrPropertyItemPagination
}

/*
UnmarshalJSON unmarshals a JSON message and sets the value field to the appropriate instance
according to the "object" field of the message.
*/
func (u *propertyItemOrPropertyItemPaginationUnmarshaler) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.value = nil
		return nil
	}
	switch getObject(data) {
	case "list":
		u.value = &PropertyItemPagination{}
	case "property_item":
		t := &propertyItemUnmarshaler{}
		if err := t.UnmarshalJSON(data); err != nil {
			return err
		}
		u.value = t.value
		return nil
	default:
		return fmt.Errorf("unmarshaling PropertyItemOrPropertyItemPagination: data has unknown object field: %s", string(data))
	}
	return json.Unmarshal(data, u.value)
}

func (u *propertyItemOrPropertyItemPaginationUnmarshaler) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.value)
}

type alwaysArray string

func (s alwaysArray) MarshalJSON() ([]byte, error) {
	return []byte("\"array\""), nil
}

type alwaysBlock string

func (s alwaysBlock) MarshalJSON() ([]byte, error) {
	return []byte("\"block\""), nil
}

type alwaysBlockId string

func (s alwaysBlockId) MarshalJSON() ([]byte, error) {
	return []byte("\"block_id\""), nil
}

type alwaysBookmark string

func (s alwaysBookmark) MarshalJSON() ([]byte, error) {
	return []byte("\"bookmark\""), nil
}

type alwaysBoolean string

func (s alwaysBoolean) MarshalJSON() ([]byte, error) {
	return []byte("\"boolean\""), nil
}

type alwaysBot string

func (s alwaysBot) MarshalJSON() ([]byte, error) {
	return []byte("\"bot\""), nil
}

type alwaysBreadcrumb string

func (s alwaysBreadcrumb) MarshalJSON() ([]byte, error) {
	return []byte("\"breadcrumb\""), nil
}

type alwaysBulletedListItem string

func (s alwaysBulletedListItem) MarshalJSON() ([]byte, error) {
	return []byte("\"bulleted_list_item\""), nil
}

type alwaysCallout string

func (s alwaysCallout) MarshalJSON() ([]byte, error) {
	return []byte("\"callout\""), nil
}

type alwaysCheckbox string

func (s alwaysCheckbox) MarshalJSON() ([]byte, error) {
	return []byte("\"checkbox\""), nil
}

type alwaysChildDatabase string

func (s alwaysChildDatabase) MarshalJSON() ([]byte, error) {
	return []byte("\"child_database\""), nil
}

type alwaysChildPage string

func (s alwaysChildPage) MarshalJSON() ([]byte, error) {
	return []byte("\"child_page\""), nil
}

type alwaysCode string

func (s alwaysCode) MarshalJSON() ([]byte, error) {
	return []byte("\"code\""), nil
}

type alwaysComment string

func (s alwaysComment) MarshalJSON() ([]byte, error) {
	return []byte("\"comment\""), nil
}

type alwaysCreatedBy string

func (s alwaysCreatedBy) MarshalJSON() ([]byte, error) {
	return []byte("\"created_by\""), nil
}

type alwaysCreatedTime string

func (s alwaysCreatedTime) MarshalJSON() ([]byte, error) {
	return []byte("\"created_time\""), nil
}

type alwaysDatabase string

func (s alwaysDatabase) MarshalJSON() ([]byte, error) {
	return []byte("\"database\""), nil
}

type alwaysDatabaseId string

func (s alwaysDatabaseId) MarshalJSON() ([]byte, error) {
	return []byte("\"database_id\""), nil
}

type alwaysDate string

func (s alwaysDate) MarshalJSON() ([]byte, error) {
	return []byte("\"date\""), nil
}

type alwaysDualProperty string

func (s alwaysDualProperty) MarshalJSON() ([]byte, error) {
	return []byte("\"dual_property\""), nil
}

type alwaysEmail string

func (s alwaysEmail) MarshalJSON() ([]byte, error) {
	return []byte("\"email\""), nil
}

type alwaysEmoji string

func (s alwaysEmoji) MarshalJSON() ([]byte, error) {
	return []byte("\"emoji\""), nil
}

type alwaysEquation string

func (s alwaysEquation) MarshalJSON() ([]byte, error) {
	return []byte("\"equation\""), nil
}

type alwaysExternal string

func (s alwaysExternal) MarshalJSON() ([]byte, error) {
	return []byte("\"external\""), nil
}

type alwaysFile string

func (s alwaysFile) MarshalJSON() ([]byte, error) {
	return []byte("\"file\""), nil
}

type alwaysFiles string

func (s alwaysFiles) MarshalJSON() ([]byte, error) {
	return []byte("\"files\""), nil
}

type alwaysFormula string

func (s alwaysFormula) MarshalJSON() ([]byte, error) {
	return []byte("\"formula\""), nil
}

type alwaysLastEditedBy string

func (s alwaysLastEditedBy) MarshalJSON() ([]byte, error) {
	return []byte("\"last_edited_by\""), nil
}

type alwaysLastEditedTime string

func (s alwaysLastEditedTime) MarshalJSON() ([]byte, error) {
	return []byte("\"last_edited_time\""), nil
}

type alwaysLinkPreview string

func (s alwaysLinkPreview) MarshalJSON() ([]byte, error) {
	return []byte("\"link_preview\""), nil
}

type alwaysList string

func (s alwaysList) MarshalJSON() ([]byte, error) {
	return []byte("\"list\""), nil
}

type alwaysMe string

func (s alwaysMe) MarshalJSON() ([]byte, error) {
	return []byte("\"me\""), nil
}

type alwaysMention string

func (s alwaysMention) MarshalJSON() ([]byte, error) {
	return []byte("\"mention\""), nil
}

type alwaysMultiSelect string

func (s alwaysMultiSelect) MarshalJSON() ([]byte, error) {
	return []byte("\"multi_select\""), nil
}

type alwaysNumber string

func (s alwaysNumber) MarshalJSON() ([]byte, error) {
	return []byte("\"number\""), nil
}

type alwaysPage string

func (s alwaysPage) MarshalJSON() ([]byte, error) {
	return []byte("\"page\""), nil
}

type alwaysPageId string

func (s alwaysPageId) MarshalJSON() ([]byte, error) {
	return []byte("\"page_id\""), nil
}

type alwaysPageOrDatabase string

func (s alwaysPageOrDatabase) MarshalJSON() ([]byte, error) {
	return []byte("\"page_or_database\""), nil
}

type alwaysPeople string

func (s alwaysPeople) MarshalJSON() ([]byte, error) {
	return []byte("\"people\""), nil
}

type alwaysPerson string

func (s alwaysPerson) MarshalJSON() ([]byte, error) {
	return []byte("\"person\""), nil
}

type alwaysPhoneNumber string

func (s alwaysPhoneNumber) MarshalJSON() ([]byte, error) {
	return []byte("\"phone_number\""), nil
}

type alwaysPropertyItem string

func (s alwaysPropertyItem) MarshalJSON() ([]byte, error) {
	return []byte("\"property_item\""), nil
}

type alwaysRelation string

func (s alwaysRelation) MarshalJSON() ([]byte, error) {
	return []byte("\"relation\""), nil
}

type alwaysRichText string

func (s alwaysRichText) MarshalJSON() ([]byte, error) {
	return []byte("\"rich_text\""), nil
}

type alwaysRollup string

func (s alwaysRollup) MarshalJSON() ([]byte, error) {
	return []byte("\"rollup\""), nil
}

type alwaysSelect string

func (s alwaysSelect) MarshalJSON() ([]byte, error) {
	return []byte("\"select\""), nil
}

type alwaysSingleProperty string

func (s alwaysSingleProperty) MarshalJSON() ([]byte, error) {
	return []byte("\"single_property\""), nil
}

type alwaysStatus string

func (s alwaysStatus) MarshalJSON() ([]byte, error) {
	return []byte("\"status\""), nil
}

type alwaysString string

func (s alwaysString) MarshalJSON() ([]byte, error) {
	return []byte("\"string\""), nil
}

type alwaysTemplateMention string

func (s alwaysTemplateMention) MarshalJSON() ([]byte, error) {
	return []byte("\"template_mention\""), nil
}

type alwaysTemplateMentionDate string

func (s alwaysTemplateMentionDate) MarshalJSON() ([]byte, error) {
	return []byte("\"template_mention_date\""), nil
}

type alwaysTemplateMentionUser string

func (s alwaysTemplateMentionUser) MarshalJSON() ([]byte, error) {
	return []byte("\"template_mention_user\""), nil
}

type alwaysText string

func (s alwaysText) MarshalJSON() ([]byte, error) {
	return []byte("\"text\""), nil
}

type alwaysTitle string

func (s alwaysTitle) MarshalJSON() ([]byte, error) {
	return []byte("\"title\""), nil
}

type alwaysUrl string

func (s alwaysUrl) MarshalJSON() ([]byte, error) {
	return []byte("\"url\""), nil
}

type alwaysUser string

func (s alwaysUser) MarshalJSON() ([]byte, error) {
	return []byte("\"user\""), nil
}

type alwaysWorkspace string

func (s alwaysWorkspace) MarshalJSON() ([]byte, error) {
	return []byte("\"workspace\""), nil
}
