package notion

import (
	"encoding/json"
	"fmt"
	uuid "github.com/google/uuid"
)

// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/property-object

// All database objects include a child properties object. This properties object is composed of individual database property objects. These property objects define the database schema and are rendered in the Notion UI as database columns.
type Property interface {
	isProperty()
}

// Every database property object contains the following keys:
type propertyCommon struct {
	Id   string `json:"id"`   // An identifier for the property, usually a short string of random letters and symbols.  Some automatically generated property types have special human-readable IDs. For example, all Title properties have an id of "title".
	Name string `json:"name"` // The name of the property as it appears in Notion.
}

type propertyUnmarshaler struct {
	value Property
}

/*
UnmarshalJSON unmarshals a JSON message and sets the value field to the appropriate instance
according to the "type" field of the message.
*/
func (u *propertyUnmarshaler) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.value = nil
		return nil
	}
	switch string(getRawProperty(data, "type")) {
	case "\"checkbox\"":
		u.value = &CheckboxProperty{}
	case "\"created_by\"":
		u.value = &CreatedByProperty{}
	case "\"created_time\"":
		u.value = &CreatedTimeProperty{}
	case "\"date\"":
		u.value = &DateProperty{}
	case "\"email\"":
		u.value = &EmailProperty{}
	case "\"files\"":
		u.value = &FilesProperty{}
	case "\"formula\"":
		u.value = &FormulaProperty{}
	case "\"last_edited_by\"":
		u.value = &LastEditedByProperty{}
	case "\"last_edited_time\"":
		u.value = &LastEditedTimeProperty{}
	case "\"multi_select\"":
		u.value = &MultiSelectProperty{}
	case "\"number\"":
		u.value = &NumberProperty{}
	case "\"people\"":
		u.value = &PeopleProperty{}
	case "\"phone_number\"":
		u.value = &PhoneNumberProperty{}
	case "\"relation\"":
		u.value = &RelationProperty{}
	case "\"rich_text\"":
		u.value = &RichTextProperty{}
	case "\"rollup\"":
		u.value = &RollupProperty{}
	case "\"select\"":
		u.value = &SelectProperty{}
	case "\"status\"":
		u.value = &StatusProperty{}
	case "\"title\"":
		u.value = &TitleProperty{}
	case "\"url\"":
		u.value = &UrlProperty{}
	default:
		return fmt.Errorf("unmarshaling Property: data has unknown type field: %s", string(data))
	}
	return json.Unmarshal(data, u.value)
}

func (u *propertyUnmarshaler) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.value)
}

type PropertyMap map[string]Property

func (m *PropertyMap) UnmarshalJSON(data []byte) error {
	t := map[string]propertyUnmarshaler{}
	if err := json.Unmarshal(data, &t); err != nil {
		return err
	}
	*m = PropertyMap{}
	for k, u := range t {
		(*m)[k] = u.value
	}
	return nil
}

// Checkbox
type CheckboxProperty struct {
	propertyCommon
	Type     alwaysCheckbox `json:"type"`
	Checkbox struct{}       `json:"checkbox"` //  A checkbox database property is rendered in the Notion UI as a column that contains checkboxes. The checkbox type object is empty; there is no additional property configuration.
}

func (_ *CheckboxProperty) isProperty() {}

// Created by
type CreatedByProperty struct {
	propertyCommon
	Type      alwaysCreatedBy `json:"type"`
	CreatedBy struct{}        `json:"created_by"` //  A created by database property is rendered in the Notion UI as a column that contains people mentions of each row's author as values.   The created_by type object is empty. There is no additional property configuration.
}

func (_ *CreatedByProperty) isProperty() {}

// Created time
type CreatedTimeProperty struct {
	propertyCommon
	Type        alwaysCreatedTime `json:"type"`
	CreatedTime struct{}          `json:"created_time"` //  A created time database property is rendered in the Notion UI as a column that contains timestamps of when each row was created as values.   The created_time type object is empty. There is no additional property configuration.
}

func (_ *CreatedTimeProperty) isProperty() {}

// Date
type DateProperty struct {
	propertyCommon
	Type alwaysDate `json:"type"`
	Date struct{}   `json:"date"` //  A date database property is rendered in the Notion UI as a column that contains date values.   The date type object is empty; there is no additional configuration.
}

func (_ *DateProperty) isProperty() {}

type EmailProperty struct {
	propertyCommon
	Type alwaysEmail `json:"type"`
}

func (_ *EmailProperty) isProperty() {}

type FilesProperty struct {
	propertyCommon
	Type alwaysFiles `json:"type"`
}

func (_ *FilesProperty) isProperty() {}

type FormulaProperty struct {
	propertyCommon
	Type alwaysFormula `json:"type"`
}

func (_ *FormulaProperty) isProperty() {}

type LastEditedByProperty struct {
	propertyCommon
	Type alwaysLastEditedBy `json:"type"`
}

func (_ *LastEditedByProperty) isProperty() {}

type LastEditedTimeProperty struct {
	propertyCommon
	Type alwaysLastEditedTime `json:"type"`
}

func (_ *LastEditedTimeProperty) isProperty() {}

type MultiSelectProperty struct {
	propertyCommon
	Type alwaysMultiSelect `json:"type"`
}

func (_ *MultiSelectProperty) isProperty() {}

type NumberProperty struct {
	propertyCommon
	Type alwaysNumber `json:"type"`
}

func (_ *NumberProperty) isProperty() {}

type PeopleProperty struct {
	propertyCommon
	Type alwaysPeople `json:"type"`
}

func (_ *PeopleProperty) isProperty() {}

type PhoneNumberProperty struct {
	propertyCommon
	Type alwaysPhoneNumber `json:"type"`
}

func (_ *PhoneNumberProperty) isProperty() {}

type RelationProperty struct {
	propertyCommon
	Type alwaysRelation `json:"type"`
}

func (_ *RelationProperty) isProperty() {}

type RichTextProperty struct {
	propertyCommon
	Type alwaysRichText `json:"type"`
}

func (_ *RichTextProperty) isProperty() {}

type RollupProperty struct {
	propertyCommon
	Type alwaysRollup `json:"type"`
}

func (_ *RollupProperty) isProperty() {}

type SelectProperty struct {
	propertyCommon
	Type alwaysSelect `json:"type"`
}

func (_ *SelectProperty) isProperty() {}

// Status
type StatusProperty struct {
	propertyCommon
	Type   alwaysStatus       `json:"type"`
	Status StatusPropertyData `json:"status"` //  A status database property is rendered in the Notion UI as a column that contains values from a list of status options. The status type object includes an array of options objects and an array of groups objects.   The options array is a sorted list of list of the available status options for the property. Each option object in the array has the following fields:
}

func (_ *StatusProperty) isProperty() {}

/*
Title
A title database property controls the title that appears at the top of a page when a database row is opened. The title type object itself is empty; there is no additional configuration.
*/
type TitleProperty struct {
	propertyCommon
	Type  alwaysTitle `json:"type"`
	Title struct{}    `json:"title"`
}

func (_ *TitleProperty) isProperty() {}

type UrlProperty struct {
	propertyCommon
	Type alwaysUrl `json:"type"`
}

func (_ *UrlProperty) isProperty() {}

type StatusPropertyData struct {
	Options []StatusPropertyDataOption `json:"options"`
	Groups  []StatusPropertyDataGroup  `json:"groups"`
}

/*

A status database property is rendered in the Notion UI as a column that contains values from a list of status options. The status type object includes an array of options objects and an array of groups objects.

The options array is a sorted list of list of the available status options for the property. Each option object in the array has the following fields:
*/
type StatusPropertyDataOption struct {
	Color string    `json:"color"` // The color of the option as rendered in the Notion UI. Possible values include:   - blue - brown - default - gray - green - orange - pink - purple - red - yellow
	Id    uuid.UUID `json:"id"`    // An identifier for the option. The id does not change if the name is changed. It is sometimes, but not always, a UUID.
	Name  string    `json:"name"`  // The name of the option as it appears in the Notion UI.  Note: Commas (",") are not valid for status values.
}

// A group is a collection of options. The groups array is a sorted list of the available groups for the property. Each group object in the array has the following fields:
type StatusPropertyDataGroup struct {
	Color     string      `json:"color"`      // The color of the option as rendered in the Notion UI. Possible values include:   - blue - brown - default - gray - green - orange - pink - purple - red - yellow
	Id        uuid.UUID   `json:"id"`         // An identifier for the option. The id does not change if the name is changed. It is sometimes, but not always, a UUID.
	Name      string      `json:"name"`       // The name of the option as it appears in the Notion UI.  Note: Commas (",") are not valid for status values.
	OptionIds []uuid.UUID `json:"option_ids"` // A sorted list of ids of all of the options that belong to a group.
}
