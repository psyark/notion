// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/block

package notion

import (
	"fmt"
	"github.com/google/uuid"
	"github.com/psyark/notion/json"
)

/*
A block object represents a piece of content within Notion. The API translates the headings, toggles, paragraphs, lists, media, and more that you can interact with in the Notion UI as different block type objects.

Use the Retrieve block children endpoint to list all of the blocks on a page.
*/
type Block struct {
	Type             string                 `json:"type"`
	Object           alwaysBlock            `json:"object"`                     // Always "block".
	Id               uuid.UUID              `json:"id"`                         // Identifier for the block.
	Parent           *Parent                `json:"parent,omitempty"`           // Information about the block's parent. See Parent object.
	CreatedTime      ISO8601String          `json:"created_time,omitempty"`     // Date and time when this block was created. Formatted as an ISO 8601 date time string.
	CreatedBy        User                   `json:"created_by"`                 // User who created the block.
	LastEditedTime   ISO8601String          `json:"last_edited_time,omitempty"` // Date and time when this block was last updated. Formatted as an ISO 8601 date time string.
	LastEditedBy     User                   `json:"last_edited_by"`             // User who last edited the block.
	Archived         bool                   `json:"archived"`                   // The archived status of the block.
	InTrash          bool                   `json:"in_trash"`                   // Whether the block has been deleted.
	HasChildren      bool                   `json:"has_children"`               // Whether or not the block has children blocks nested within it.
	Bookmark         *BlockBookmark         `json:"bookmark"`                   // Bookmark
	Breadcrumb       struct{}               `json:"breadcrumb"`                 // Breadcrumb block objects do not contain any information within the breadcrumb property.
	BulletedListItem *BlockBulletedListItem `json:"bulleted_list_item"`         // Bulleted list item
	Callout          *BlockCallout          `json:"callout"`                    // Callout
	ChildDatabase    *BlockChildDatabase    `json:"child_database"`             // Child database
	ChildPage        *BlockChildPage        `json:"child_page"`                 // Child page
	Code             *BlockCode             `json:"code"`                       // Code
	ColumnList       struct{}               `json:"column_list"`                // Column lists are parent blocks for columns. They do not contain any information within the column_list property.
	Column           struct{}               `json:"column"`                     // Columns are parent blocks for any block types listed in this reference except for other columns. They do not contain any information within the column property. They can only be appended to column_lists.
	Divider          struct{}               `json:"divider"`                    // Divider block objects do not contain any information within the divider property.
	Embed            *BlockEmbed            `json:"embed"`                      // Embed
	Equation         *BlockEquation         `json:"equation"`                   // Equation
	File             *File                  `json:"file"`                       // File
	Heading1         *BlockHeading          `json:"heading_1"`
	Heading2         *BlockHeading          `json:"heading_2"`
	Heading3         *BlockHeading          `json:"heading_3"`
	Image            *File                  `json:"image"`        // Image block objects contain a file object detailing information about the image.
	LinkPreview      *BlockLinkPreview      `json:"link_preview"` // Link Preview block objects contain the originally pasted url:
	Paragraph        *BlockParagraph        `json:"paragraph"`    // Paragraph
	Pdf              *BlockPdf              `json:"pdf"`          // PDF
	SyncedBlock      *BlockSyncedBlock      `json:"synced_block"` // Synced block
	ToDo             *BlockToDo             `json:"to_do"`        // To do
}

func (o Block) MarshalJSON() ([]byte, error) {
	if o.Type == "" {
		switch {
		case defined(o.Bookmark):
			o.Type = "bookmark"
		case defined(o.Breadcrumb):
			o.Type = "breadcrumb"
		case defined(o.BulletedListItem):
			o.Type = "bulleted_list_item"
		case defined(o.Callout):
			o.Type = "callout"
		case defined(o.ChildDatabase):
			o.Type = "child_database"
		case defined(o.ChildPage):
			o.Type = "child_page"
		case defined(o.Code):
			o.Type = "code"
		case defined(o.ColumnList):
			o.Type = "column_list"
		case defined(o.Column):
			o.Type = "column"
		case defined(o.Divider):
			o.Type = "divider"
		case defined(o.Embed):
			o.Type = "embed"
		case defined(o.Equation):
			o.Type = "equation"
		case defined(o.File):
			o.Type = "file"
		case defined(o.Heading1):
			o.Type = "heading_1"
		case defined(o.Heading2):
			o.Type = "heading_2"
		case defined(o.Heading3):
			o.Type = "heading_3"
		case defined(o.Image):
			o.Type = "image"
		case defined(o.LinkPreview):
			o.Type = "link_preview"
		case defined(o.Paragraph):
			o.Type = "paragraph"
		case defined(o.Pdf):
			o.Type = "pdf"
		case defined(o.SyncedBlock):
			o.Type = "synced_block"
		case defined(o.ToDo):
			o.Type = "to_do"
		}
	}
	type Alias Block
	data, err := json.Marshal(Alias(o))
	if err != nil {
		return nil, err
	}
	visibility := map[string]bool{
		"bookmark":           o.Type == "bookmark",
		"breadcrumb":         o.Type == "breadcrumb",
		"bulleted_list_item": o.Type == "bulleted_list_item",
		"callout":            o.Type == "callout",
		"child_database":     o.Type == "child_database",
		"child_page":         o.Type == "child_page",
		"code":               o.Type == "code",
		"column":             o.Type == "column",
		"column_list":        o.Type == "column_list",
		"divider":            o.Type == "divider",
		"embed":              o.Type == "embed",
		"equation":           o.Type == "equation",
		"file":               o.Type == "file",
		"heading_1":          o.Type == "heading_1",
		"heading_2":          o.Type == "heading_2",
		"heading_3":          o.Type == "heading_3",
		"image":              o.Type == "image",
		"link_preview":       o.Type == "link_preview",
		"paragraph":          o.Type == "paragraph",
		"pdf":                o.Type == "pdf",
		"synced_block":       o.Type == "synced_block",
		"to_do":              o.Type == "to_do",
	}
	return omitFields(data, visibility)
}

// Bookmark
type BlockBookmark struct {
	Caption []RichText `json:"caption"` // The caption for the bookmark.
	Url     string     `json:"url"`     // The link for the bookmark.
}

// Bulleted list item
type BlockBulletedListItem struct {
	RichText []RichText `json:"rich_text"`       // The rich text in the bulleted_list_item block.
	Color    string     `json:"color,omitempty"` // The color of the block. Possible values are: - "blue" - "blue_background" - "brown" - "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	Children []Block    `json:"children"`        // The nested child blocks (if any) of the bulleted_list_item block.
}

// Callout
type BlockCallout struct {
	RichText []RichText  `json:"rich_text"`          // The rich text in the callout block.
	Icon     FileOrEmoji `json:"icon,omitempty"`     // An emoji or file object that represents the callout's icon. If the callout does not have an icon.
	Color    string      `json:"color,omitempty"`    // The color of the block. Possible values are: - "blue" - "blue_background" - "brown" - "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	Children []Block     `json:"children,omitempty"` // UNDOCUMENTED
}

// UnmarshalJSON assigns the appropriate implementation to interface field(s)
func (o *BlockCallout) UnmarshalJSON(data []byte) error {
	type Alias BlockCallout
	t := &struct {
		*Alias
		Icon fileOrEmojiUnmarshaler `json:"icon"`
	}{Alias: (*Alias)(o)}
	if err := json.Unmarshal(data, t); err != nil {
		return fmt.Errorf("unmarshaling BlockCallout: %w", err)
	}
	o.Icon = t.Icon.value
	return nil
}

// Child database
type BlockChildDatabase struct {
	Title string `json:"title"` // The plain text title of the database.
}

// Child page
type BlockChildPage struct {
	Title string `json:"title"` // The plain text title of the page.
}

// Code
type BlockCode struct {
	Caption  []RichText `json:"caption,omitempty"` // The rich text in the caption of the code block.
	RichText []RichText `json:"rich_text"`         // The rich text in the code block.
	Language string     `json:"language"`          // The language of the code contained in the code block.
}

// Embed
type BlockEmbed struct {
	Url string `json:"url"` // The link to the website that the embed block displays.
}

// Equation
type BlockEquation struct {
	Expression string `json:"expression"` // A KaTeX compatible string.
}

// All heading block objects, heading_1, heading_2, and heading_3, contain the following information within their corresponding objects:
type BlockHeading struct {
	RichText     []RichText `json:"rich_text"`       // The rich text of the heading.
	Color        string     `json:"color,omitempty"` // The color of the block. Possible values are: - "blue" - "blue_background" - "brown" - "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	IsToggleable bool       `json:"is_toggleable"`   // Whether or not the heading block is a toggle heading or not. If true, then the heading block toggles and can support children. If false, then the heading block is a static heading block.
}

// Link Preview block objects contain the originally pasted url:
type BlockLinkPreview struct {
	Url string `json:"url"`
}

// Paragraph
type BlockParagraph struct {
	RichText []RichText `json:"rich_text"`          // The rich text displayed in the paragraph block.
	Color    string     `json:"color,omitempty"`    // The color of the block. Possible values are: - "blue" - "blue_background" - "brown" - "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	Children []Block    `json:"children,omitempty"` // The nested child blocks (if any) of the paragraph block.
}

/*
PDF

A PDF block object represents a PDF that has been embedded within a Notion page. It contains the following fields:
*/
type BlockPdf struct {
	Caption  []RichText    `json:"caption"`            // A caption, if provided, for the PDF block.
	Type     string        `json:"type"`               // A constant string representing the type of PDF. file indicates a Notion-hosted file, and external represents a third-party link.
	External *FileExternal `json:"external,omitempty"` // An object containing type-specific information about the PDF.
	File     *FileFile     `json:"file,omitempty"`     // An object containing type-specific information about the PDF.
}

/*
Synced block

Similar to the Notion UI, there are two versions of a synced_block object: the original block that was created first and doesn't yet sync with anything else, and the duplicate block or blocks synced to the original.

📘An original synced block must be created before corresponding duplicate block or blocks can be made.

Original synced block objects contain the following information within the synced_block property:
*/
type BlockSyncedBlock struct {
	SyncedFrom *SyncedFrom `json:"synced_from"`        // The value is always null to signify that this is an original synced block that does not refer to another block.
	Children   []Block     `json:"children,omitempty"` // The nested child blocks, if any, of the synced_block block. These blocks will be mirrored in the duplicate synced_block.
}

type SyncedFrom struct {
	BlockId uuid.UUID `json:"block_id"` // An identifier for the original synced_block.
}

// To do
type BlockToDo struct {
	RichText []RichText `json:"rich_text"`          // The rich text displayed in the To do block.
	Checked  *bool      `json:"checked,omitempty"`  // Whether the To do is checked.
	Color    string     `json:"color,omitempty"`    // The color of the block. Possible values are: - "blue" - "blue_background" - "brown" - "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	Children []Block    `json:"children,omitempty"` // The nested child blocks, if any, of the To do block.
}
