package notion

import "encoding/json"

// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/intro

/*
Pagination

Endpoints that return lists of objects support cursor-based pagination requests. By default, Notion returns ten items per API call. If the number of items in a response from a support endpoint exceeds the default, then an integration can use pagination to request a specific set of the results and/or to limit the number of returned items.

If an endpoint supports pagination, then the response object contains the below fields.
*/
type Pagination struct {
	Type           string                `json:"type"`
	HasMore        bool                  `json:"has_more"`    // Whether the response includes the end of the list. false if there are no more results. Otherwise, true.
	NextCursor     *string               `json:"next_cursor"` // A string that can be used to retrieve the next page of results by passing the value as the start_cursor parameter to the same endpoint. Only available when has_more is true.
	Object         alwaysList            `json:"object"`      // The constant string "list".
	Results        json.RawMessage       `json:"results"`     // The list, or partial list, of endpoint-specific results. Refer to a supported endpoint's individual documentation for details.
	Block          struct{}              `json:"block"`
	Comment        struct{}              `json:"comment"`
	Database       struct{}              `json:"database"`
	Page           struct{}              `json:"page"`
	PageOrDatabase struct{}              `json:"page_or_database"`
	PropertyItem   PaginatedPropertyInfo `json:"property_item"`
	User           struct{}              `json:"user"`
}

func (o Pagination) isPropertyItemOrPropertyItemPagination() {}
func (o Pagination) MarshalJSON() ([]byte, error) {
	if o.Type == "" {
		switch {
		case defined(o.Block):
			o.Type = "block"
		case defined(o.Comment):
			o.Type = "comment"
		case defined(o.Database):
			o.Type = "database"
		case defined(o.Page):
			o.Type = "page"
		case defined(o.PageOrDatabase):
			o.Type = "page_or_database"
		case defined(o.PropertyItem):
			o.Type = "property_item"
		case defined(o.User):
			o.Type = "user"
		}
	}
	type Alias Pagination
	data, err := json.Marshal(Alias(o))
	if err != nil {
		return nil, err
	}
	visibility := map[string]bool{
		"block":            o.Type == "block",
		"comment":          o.Type == "comment",
		"database":         o.Type == "database",
		"page":             o.Type == "page",
		"page_or_database": o.Type == "page_or_database",
		"property_item":    o.Type == "property_item",
		"user":             o.Type == "user",
	}
	return omitFields(data, visibility)
}
