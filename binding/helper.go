// Code generated by notion.doc2api; DO NOT EDIT.

package binding

import (
	notion "github.com/psyark/notion"
	"reflect"
)

func getTypeForBinding(p notion.Property) string {
	switch p.Type {
	case "title":
		return "RichTextArray"
	case "rich_text":
		return "RichTextArray"
	case "number":
		return "*float64"
	case "select":
		return "*Option"
	case "status":
		return "*Option"
	case "multi_select":
		return "[]Option"
	case "date":
		return "*PropertyValueDate"
	case "formula":
		return "*Formula"
	case "relation":
		return "[]PageReference"
	case "rollup":
		return "*Rollup"
	case "people":
		return "[]User"
	case "files":
		return "[]File"
	case "checkbox":
		return "bool"
	case "url":
		return "*string"
	case "email":
		return "*string"
	case "phone_number":
		return "*string"
	case "created_time":
		return "ISO8601String"
	case "created_by":
		return "User"
	case "last_edited_time":
		return "ISO8601String"
	case "last_edited_by":
		return "User"
	case "unique_id":
		return "*PropertyValueUniqueId"
	case "button":
		return "*struct{}"
	}
	panic(p.Type)
}
func accessPayloadField(p *notion.PropertyValue) reflect.Value {
	switch p.Type {
	case "title":
		return reflect.ValueOf(&p.Title)
	case "rich_text":
		return reflect.ValueOf(&p.RichText)
	case "number":
		return reflect.ValueOf(&p.Number)
	case "select":
		return reflect.ValueOf(&p.Select)
	case "status":
		return reflect.ValueOf(&p.Status)
	case "multi_select":
		return reflect.ValueOf(&p.MultiSelect)
	case "date":
		return reflect.ValueOf(&p.Date)
	case "formula":
		return reflect.ValueOf(&p.Formula)
	case "relation":
		return reflect.ValueOf(&p.Relation)
	case "rollup":
		return reflect.ValueOf(&p.Rollup)
	case "people":
		return reflect.ValueOf(&p.People)
	case "files":
		return reflect.ValueOf(&p.Files)
	case "checkbox":
		return reflect.ValueOf(&p.Checkbox)
	case "url":
		return reflect.ValueOf(&p.Url)
	case "email":
		return reflect.ValueOf(&p.Email)
	case "phone_number":
		return reflect.ValueOf(&p.PhoneNumber)
	case "created_time":
		return reflect.ValueOf(&p.CreatedTime)
	case "created_by":
		return reflect.ValueOf(&p.CreatedBy)
	case "last_edited_time":
		return reflect.ValueOf(&p.LastEditedTime)
	case "last_edited_by":
		return reflect.ValueOf(&p.LastEditedBy)
	case "unique_id":
		return reflect.ValueOf(&p.UniqueId)
	case "button":
		return reflect.ValueOf(&p.Button)
	}
	panic(p.Type)
}
