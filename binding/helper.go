// Code generated by notion.doc2api; DO NOT EDIT.

package binding

import (
	"fmt"
	"github.com/psyark/notion"
)

func getTypeForBinding(p notion.Property) string {
	switch p.Type {
	case "title":
		return "notion.RichTextArray"
	case "rich_text":
		return "notion.RichTextArray"
	case "number":
		return "*float64"
	case "select":
		return "*notion.Option"
	case "status":
		return "*notion.Option"
	case "multi_select":
		return "[]notion.Option"
	case "date":
		return "*notion.PropertyValueDate"
	case "formula":
		return "*notion.Formula"
	case "relation":
		return "[]notion.PageReference"
	case "rollup":
		return "*notion.Rollup"
	case "people":
		return "[]notion.User"
	case "files":
		return "[]notion.File"
	case "checkbox":
		return "bool"
	case "url":
		return "*string"
	case "email":
		return "*string"
	case "phone_number":
		return "*string"
	case "created_time":
		return "notion.ISO8601String"
	case "created_by":
		return "notion.User"
	case "last_edited_time":
		return "notion.ISO8601String"
	case "last_edited_by":
		return "notion.User"
	case "unique_id":
		return "*notion.PropertyValueUniqueId"
	case "button":
		return "*struct{}"
	}
	panic(p.Type)
}

// getPayload は PropertyValueのTypeに応じたペイロードフィールドの値を取得します
func getPayload(p *notion.PropertyValue) (any, error) {
	switch p.Type {
	case "title":
		return p.Title, nil
	case "rich_text":
		return p.RichText, nil
	case "number":
		return p.Number, nil
	case "select":
		return p.Select, nil
	case "status":
		return p.Status, nil
	case "multi_select":
		return p.MultiSelect, nil
	case "date":
		return p.Date, nil
	case "formula":
		return p.Formula, nil
	case "relation":
		return p.Relation, nil
	case "rollup":
		return p.Rollup, nil
	case "people":
		return p.People, nil
	case "files":
		return p.Files, nil
	case "checkbox":
		return p.Checkbox, nil
	case "url":
		return p.Url, nil
	case "email":
		return p.Email, nil
	case "phone_number":
		return p.PhoneNumber, nil
	case "created_time":
		return p.CreatedTime, nil
	case "created_by":
		return p.CreatedBy, nil
	case "last_edited_time":
		return p.LastEditedTime, nil
	case "last_edited_by":
		return p.LastEditedBy, nil
	case "unique_id":
		return p.UniqueId, nil
	case "button":
		return p.Button, nil
	}
	return nil, fmt.Errorf("unknown type: %s", p.Type)
}

// setPayload は PropertyValueのTypeに応じたペイロードフィールドの値を更新します
func setPayload(p *notion.PropertyValue, value any) error {
	switch p.Type {
	case "title":
		return setPayloadFieldInternal(&p.Title, value)
	case "rich_text":
		return setPayloadFieldInternal(&p.RichText, value)
	case "number":
		return setPayloadFieldInternal(&p.Number, value)
	case "select":
		return setPayloadFieldInternal(&p.Select, value)
	case "status":
		return setPayloadFieldInternal(&p.Status, value)
	case "multi_select":
		return setPayloadFieldInternal(&p.MultiSelect, value)
	case "date":
		return setPayloadFieldInternal(&p.Date, value)
	case "formula":
		return setPayloadFieldInternal(&p.Formula, value)
	case "relation":
		return setPayloadFieldInternal(&p.Relation, value)
	case "rollup":
		return setPayloadFieldInternal(&p.Rollup, value)
	case "people":
		return setPayloadFieldInternal(&p.People, value)
	case "files":
		return setPayloadFieldInternal(&p.Files, value)
	case "checkbox":
		return setPayloadFieldInternal(&p.Checkbox, value)
	case "url":
		return setPayloadFieldInternal(&p.Url, value)
	case "email":
		return setPayloadFieldInternal(&p.Email, value)
	case "phone_number":
		return setPayloadFieldInternal(&p.PhoneNumber, value)
	case "created_time":
		return setPayloadFieldInternal(&p.CreatedTime, value)
	case "created_by":
		return setPayloadFieldInternal(&p.CreatedBy, value)
	case "last_edited_time":
		return setPayloadFieldInternal(&p.LastEditedTime, value)
	case "last_edited_by":
		return setPayloadFieldInternal(&p.LastEditedBy, value)
	case "unique_id":
		return setPayloadFieldInternal(&p.UniqueId, value)
	case "button":
		return setPayloadFieldInternal(&p.Button, value)
	}
	return fmt.Errorf("unknown type: %s", p.Type)
}
