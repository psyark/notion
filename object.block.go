package notion

import (
	"encoding/json"
	"fmt"
	uuid "github.com/google/uuid"
)

// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/block

/*
A block object represents a piece of content within Notion. The API translates the headings, toggles, paragraphs, lists, media, and more that you can interact with in the Notion UI as different block type objects.

 For example, the following block object represents a Heading 2 in the Notion UI:

Use the Retrieve block children endpoint to list all of the blocks on a page.

Block types that support child blocks
Some block types contain nested blocks. The following block types support child blocks:

- Bulleted list item
- Callout
- Child database
- Child page
- Column
- Heading 1, when the is_toggleable property is true
- Heading 2, when the is_toggleable property is true
- Heading 3, when the is_toggleable property is true
- Numbered list item
- Paragraph
- Quote
- Synced block
- Table
- Template
- To do
- Toggle

The API does not support all block types.
Only the block type objects listed in the reference below are supported. Any unsupported block types appear in the structure, but contain a `type` set to `"unsupported"`.
*/
type Block interface {
	isBlock()
	GetObject() alwaysBlock
	GetId() uuid.UUID
	GetParent() Parent
	GetCreatedTime() ISO8601String
	GetCreatedBy() PartialUser
	GetLastEditedTime() ISO8601String
	GetLastEditedBy() PartialUser
	GetArchived() bool
	GetHasChildren() bool
}
type BlockCommon struct {
	Object         alwaysBlock   `json:"object"`           // Always "block".
	Id             uuid.UUID     `json:"id"`               // Identifier for the block.
	Parent         Parent        `json:"parent"`           // Information about the block's parent. See Parent object.
	CreatedTime    ISO8601String `json:"created_time"`     // Date and time when this block was created. Formatted as an ISO 8601 date time string.
	CreatedBy      PartialUser   `json:"created_by"`       // User who created the block.
	LastEditedTime ISO8601String `json:"last_edited_time"` // Date and time when this block was last updated. Formatted as an ISO 8601 date time string.
	LastEditedBy   PartialUser   `json:"last_edited_by"`   // User who last edited the block.
	Archived       bool          `json:"archived"`         // The archived status of the block.
	HasChildren    bool          `json:"has_children"`     // Whether or not the block has children blocks nested within it.
}

func (c *BlockCommon) GetObject() alwaysBlock {
	return c.Object
}
func (c *BlockCommon) GetId() uuid.UUID {
	return c.Id
}
func (c *BlockCommon) GetParent() Parent {
	return c.Parent
}
func (c *BlockCommon) GetCreatedTime() ISO8601String {
	return c.CreatedTime
}
func (c *BlockCommon) GetCreatedBy() PartialUser {
	return c.CreatedBy
}
func (c *BlockCommon) GetLastEditedTime() ISO8601String {
	return c.LastEditedTime
}
func (c *BlockCommon) GetLastEditedBy() PartialUser {
	return c.LastEditedBy
}
func (c *BlockCommon) GetArchived() bool {
	return c.Archived
}
func (c *BlockCommon) GetHasChildren() bool {
	return c.HasChildren
}

type blockUnmarshaler struct {
	value Block
}

/*
UnmarshalJSON unmarshals a JSON message and sets the value field to the appropriate instance
according to the "type" field of the message.
*/
func (u *blockUnmarshaler) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.value = nil
		return nil
	}
	t := struct {
		Bookmark         json.RawMessage `json:"bookmark"`
		Breadcrumb       json.RawMessage `json:"breadcrumb"`
		BulletedListItem json.RawMessage `json:"bulleted_list_item"`
		Callout          json.RawMessage `json:"callout"`
		ChildDatabase    json.RawMessage `json:"child_database"`
		ChildPage        json.RawMessage `json:"child_page"`
		Code             json.RawMessage `json:"code"`
	}{}
	if err := json.Unmarshal(data, &t); err != nil {
		return err
	}
	switch {
	case t.Bookmark != nil:
		u.value = &BookmarkBlock{}
	case t.Breadcrumb != nil:
		u.value = &BreadcrumbBlock{}
	case t.BulletedListItem != nil:
		u.value = &BulletedListItemBlock{}
	case t.Callout != nil:
		u.value = &CalloutBlock{}
	case t.ChildDatabase != nil:
		u.value = &ChildDatabaseBlock{}
	case t.ChildPage != nil:
		u.value = &ChildPageBlock{}
	case t.Code != nil:
		u.value = &CodeBlock{}
	default:
		return fmt.Errorf("unmarshal Block: %s", string(data))
	}
	return json.Unmarshal(data, u.value)
}

func (u *blockUnmarshaler) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.value)
}

type BlockList []Block

func (a *BlockList) UnmarshalJSON(data []byte) error {
	t := []blockUnmarshaler{}
	if err := json.Unmarshal(data, &t); err != nil {
		return fmt.Errorf("unmarshaling BlockList: %w", err)
	}
	*a = make([]Block, len(t))
	for i, u := range t {
		(*a)[i] = u.value
	}
	return nil
}

/*
Bookmark
Bookmark block objects contain the following information within the bookmark property:
*/
type BookmarkBlock struct {
	BlockCommon
	Type     alwaysBookmark    `json:"type"`
	Bookmark BookmarkBlockData `json:"bookmark"`
}

func (_ *BookmarkBlock) isBlock() {}

type BookmarkBlockData struct {
	Caption RichTextList `json:"caption"` // The caption for the bookmark.
	Url     string       `json:"url"`     // The link for the bookmark.
}

/*
Breadcrumb
Breadcrumb block objects do not contain any information within the breadcrumb property.
*/
type BreadcrumbBlock struct {
	BlockCommon
	Type       alwaysBreadcrumb `json:"type"`
	Breadcrumb struct{}         `json:"breadcrumb"`
}

func (_ *BreadcrumbBlock) isBlock() {}

/*
Bulleted list item
Bulleted list item block objects contain the following information within the bulleted_list_item property:
*/
type BulletedListItemBlock struct {
	BlockCommon
	Type             alwaysBulletedListItem    `json:"type"`
	BulletedListItem BulletedListItemBlockData `json:"bulleted_list_item"`
}

func (_ *BulletedListItemBlock) isBlock() {}

type BulletedListItemBlockData struct {
	RichText RichTextList `json:"rich_text"` // The rich text in the bulleted_list_item block.
	Color    string       `json:"color"`     // The color of the block. Possible values are:   - "blue" - "blue_background" - "brown" -  "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
	Children BlockList    `json:"children"`  // The nested child blocks (if any) of the bulleted_list_item block.
}

/*
Callout
Callout block objects contain the following information within the callout property:
*/
type CalloutBlock struct {
	BlockCommon
	Type    alwaysCallout    `json:"type"`
	Callout CalloutBlockData `json:"callout"`
}

func (_ *CalloutBlock) isBlock() {}

type CalloutBlockData struct {
	RichText RichTextList `json:"rich_text"` // The rich text in the callout block.
	Icon     FileOrEmoji  `json:"icon"`      // An emoji or file object that represents the callout's icon. If the callout does not have an icon.
	Color    string       `json:"color"`     // The color of the block. Possible values are:   - "blue" - "blue_background" - "brown" -  "brown_background" - "default" - "gray" - "gray_background" - "green" - "green_background" - "orange" - "orange_background" - "yellow" - "green" - "pink" - "pink_background" - "purple" - "purple_background" - "red" - "red_background" - "yellow_background"
}

// Child database
type ChildDatabaseBlock struct {
	BlockCommon
	Type          alwaysChildDatabase    `json:"type"`
	ChildDatabase ChildDatabaseBlockData `json:"child_database"`
}

func (_ *ChildDatabaseBlock) isBlock() {}

/*

Child database block objects contain the following information within the child_database property:
*/
type ChildDatabaseBlockData struct {
	Title string `json:"title"` // The plain text title of the database.
}

// Child page
type ChildPageBlock struct {
	BlockCommon
	Type      alwaysChildPage    `json:"type"`
	ChildPage ChildPageBlockData `json:"child_page"`
}

func (_ *ChildPageBlock) isBlock() {}

/*

Child page block objects contain the following information within the child_page property:
*/
type ChildPageBlockData struct {
	Title string `json:"title"` // The plain text title of the page.
}

// Code
type CodeBlock struct {
	BlockCommon
	Type alwaysCode    `json:"type"`
	Code CodeBlockData `json:"code"`
}

func (_ *CodeBlock) isBlock() {}

/*

Code block objects contain the following information within the code property:
*/
type CodeBlockData struct {
	Caption  RichTextList `json:"caption"`   // The rich text in the caption of the code block.
	RichText RichTextList `json:"rich_text"` // The rich text in the code block.
	Language string       `json:"language"`  // The language of the code contained in the code block.
}
