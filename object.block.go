package notion

import (
	"encoding/json"
	"fmt"
	uuid "github.com/google/uuid"
)

// Code generated by notion.doc2api; DO NOT EDIT.
// https://developers.notion.com/reference/block

/*
A block object represents a piece of content within Notion. The API translates the headings, toggles, paragraphs, lists, media, and more that you can interact with in the Notion UI as different block type objects.

 For example, the following block object represents a Heading 2 in the Notion UI:

Use the Retrieve block children endpoint to list all of the blocks on a page.

Block types that support child blocks
Some block types contain nested blocks. The following block types support child blocks:

- Bulleted list item
- Callout
- Child database
- Child page
- Column
- Heading 1, when the is_toggleable property is true
- Heading 2, when the is_toggleable property is true
- Heading 3, when the is_toggleable property is true
- Numbered list item
- Paragraph
- Quote
- Synced block
- Table
- Template
- To do
- Toggle

The API does not support all block types.
Only the block type objects listed in the reference below are supported. Any unsupported block types appear in the structure, but contain a `type` set to `"unsupported"`.
*/
type Block interface {
	isBlock()
	GetObject() alwaysBlock
	GetId() uuid.UUID
	GetParent() Parent
	GetCreatedTime() ISO8601String
	GetCreatedBy() PartialUser
	GetLastEditedTime() ISO8601String
	GetLastEditedBy() PartialUser
	GetArchived() bool
	GetHasChildren() bool
}
type BlockCommon struct {
	Object         alwaysBlock   `json:"object"`           // Always "block".
	Id             uuid.UUID     `json:"id"`               // Identifier for the block.
	Parent         Parent        `json:"parent"`           // Information about the block's parent. See Parent object.
	CreatedTime    ISO8601String `json:"created_time"`     // Date and time when this block was created. Formatted as an ISO 8601 date time string.
	CreatedBy      PartialUser   `json:"created_by"`       // User who created the block.
	LastEditedTime ISO8601String `json:"last_edited_time"` // Date and time when this block was last updated. Formatted as an ISO 8601 date time string.
	LastEditedBy   PartialUser   `json:"last_edited_by"`   // User who last edited the block.
	Archived       bool          `json:"archived"`         // The archived status of the block.
	HasChildren    bool          `json:"has_children"`     // Whether or not the block has children blocks nested within it.
}

func (c *BlockCommon) GetObject() alwaysBlock {
	return c.Object
}
func (c *BlockCommon) GetId() uuid.UUID {
	return c.Id
}
func (c *BlockCommon) GetParent() Parent {
	return c.Parent
}
func (c *BlockCommon) GetCreatedTime() ISO8601String {
	return c.CreatedTime
}
func (c *BlockCommon) GetCreatedBy() PartialUser {
	return c.CreatedBy
}
func (c *BlockCommon) GetLastEditedTime() ISO8601String {
	return c.LastEditedTime
}
func (c *BlockCommon) GetLastEditedBy() PartialUser {
	return c.LastEditedBy
}
func (c *BlockCommon) GetArchived() bool {
	return c.Archived
}
func (c *BlockCommon) GetHasChildren() bool {
	return c.HasChildren
}

type blockUnmarshaler struct {
	value Block
}

/*
UnmarshalJSON unmarshals a JSON message and sets the value field to the appropriate instance
according to the "type" field of the message.
*/
func (u *blockUnmarshaler) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.value = nil
		return nil
	}
	switch getType(data) {
	case "bookmark":
		u.value = &BookmarkBlock{}
	default:
		return fmt.Errorf("unmarshaling Block: data has unknown type field: %s", string(data))
	}
	return json.Unmarshal(data, u.value)
}

func (u *blockUnmarshaler) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.value)
}

/*
Bookmark block objects contain the following information within the bookmark property:
{
  //...other keys excluded
  "type": "bookmark",
  //...other keys excluded
  "bookmark": {
    "caption": [],
    "url": "https://companywebsite.com"
  }
}
*/
type BookmarkBlock struct {
	BlockCommon
	Type    alwaysBookmark `json:"type"`
	Caption RichTextArray  `json:"caption"` // The caption for the bookmark.
	Url     string         `json:"url"`     // The link for the bookmark.
}

func (_ *BookmarkBlock) isBlock() {}
