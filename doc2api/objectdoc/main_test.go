package objectdoc

import (
	"sort"
	"strings"
	"testing"

	"github.com/dave/jennifer/jen"
)

func TestMain(m *testing.M) {
	m.Run()

	{
		helper := jen.NewFile("notion")
		helper.HeaderComment("Code generated by notion.doc2api; DO NOT EDIT.")
		helper.Func().Id("getTypeForBinding").Params(jen.Id("p").Id("Property")).String().Block(
			jen.Switch(jen.Id("p").Dot("Type")).BlockFunc(func(g *jen.Group) {
				for _, f := range getSymbol[adaptiveObject]("PropertyValue").fields {
					if f, ok := f.(*field); ok && f.discriminatorValue == f.name {
						x := &jen.Statement{}
						x.Var().Id("_").Add(f.typeCode)
						c := strings.TrimPrefix(x.GoString(), "var _ ")
						g.Case(jen.Lit(f.discriminatorValue)).Return().Lit(c)
					}
				}
			}),
			jen.Panic(jen.Id("p").Dot("Type")),
		)
		helper.Func().Params(jen.Id("p").Op("*").Id("PropertyValue")).Id("get").Params().Qual("reflect", "Value").Block(
			jen.Switch(jen.Id("p").Dot("Type")).BlockFunc(func(g *jen.Group) {
				for _, f := range getSymbol[adaptiveObject]("PropertyValue").fields {
					if f, ok := f.(*field); ok && f.discriminatorValue == f.name {
						g.Case(jen.Lit(f.discriminatorValue)).Return().Qual("reflect", "ValueOf").Call(jen.Id("p").Dot(f.goName()))
					}
				}
			}),
			jen.Panic(jen.Id("p").Dot("Type")),
		)
		helper.Func().Params(jen.Id("p").Op("*").Id("PropertyValue")).Id("set").Params(jen.Id("value").Qual("reflect", "Value")).Block(
			jen.Switch(jen.Id("p").Dot("Type")).BlockFunc(func(g *jen.Group) {
				for _, f := range getSymbol[adaptiveObject]("PropertyValue").fields {
					if f, ok := f.(*field); ok && f.discriminatorValue == f.name {
						g.Case(jen.Lit(f.discriminatorValue)).Qual("reflect", "ValueOf").Call(jen.Op("&").Id("p").Dot(f.goName())).Dot("Elem").Call().Dot("Set").Call(jen.Id("value"))
					}
				}
				g.Default().Panic(jen.Id("p").Dot("Type"))
			}),
		)

		if err := helper.Save("../../binding.helper.go"); err != nil {
			panic(err)
		}
	}

	// グローバルビルダーをソートし、冪等性を保ちます
	sort.Slice(global.localSymbols, func(i, j int) bool {
		return global.localSymbols[i].name() < global.localSymbols[j].name()
	})

	gt := translator{b: global}
	if err := gt.output(); err != nil {
		panic(err)
	}
}
